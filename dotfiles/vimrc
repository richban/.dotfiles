set nocompatible

""" Plugins
call plug#begin('~/.vim/plugged')
	Plug 'majutsushi/tagbar'
	Plug 'kien/ctrlp.vim'
    Plug 'scrooloose/syntastic'
    Plug 'tpope/vim-surround'
    Plug 'Raimondi/delimitMate'
    Plug 'godlygeek/tabular'
    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
    Plug 'tpope/vim-fugitive'
    Plug 'vim-airline/vim-airline'
    Plug 'ycm-core/YouCompleteMe'
    Plug 'Yggdroot/indentLine'
    Plug 'morhetz/gruvbox'
    Plug 'ryanoasis/vim-devicons'
call plug#end()

filetype plugin indent on       " Add filetype, plugin, and indent support
syntax on

""" Colorscheme

set termguicolors
autocmd vimenter * colorscheme gruvbox
let g:gruvbox_contrast_dark = "hard"

let mapleader=" "
set cursorline

"" Formating

set encoding=utf-8
set showcmd

set textwidth=79
set colorcolumn=80
set laststatus=2
set linespace=1
set smartindent

set mouse=a
set ttymouse=sgr

""" Move selected lines
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

""" Whitespace
set nowrap                      " don't wrap lines
set tabstop=4                   " a tab is two spaces (or set this to 4)
set shiftwidth=4                   " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set smarttab
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                   " highlight matches
set incsearch                  " incremental searching
set ignorecase                 " searches are case insensitive...
set smartcase                  " ... unless they contain at least one capital letter
set number
set relativenumber 

set wildmenu

" Useful for accessing commonly-used files
nnoremap <leader>cv :e $MYVIMRC<CR>
nnoremap <leader>cz :e ~/.zshrc<CR>
nnoremap <leader>ce :e ~/.zshenv<CR>
nnoremap <leader>ca :e ~/.alias<CR>
nnoremap <leader>cf :e ~/.functions<CR>
nnoremap <leader>ct :e ~/.tmux.conf<CR>

" Toggle Paste mode
nnoremap <leader>p :set paste!<CR>

" Join yanked text on a yank (needed for terminal mode copies)
vnoremap yy y<CR>:let @"=substitute(@", '\n', '', 'g')<CR>:call yank#Osc52Yank()<CR>

" Adjusting splits
nnoremap <silent> <C-Left> :vertical resize +3<CR>
nnoremap <silent> <C-Right> :vertical resize -3<CR>
nnoremap <silent> <C-Up> :resize +3<CR>
nnoremap <silent> <C-Down> :resize -3<CR>

" Window navigation 
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

"" Swap/backup
set backupdir=~/tmp
set noswapfile
set nowritebackup
set nobackup

"" ctrlp
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']
let g:ctrlp_switch_buffer = 'et'

"" Syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:python_highlight_builtin_funcs=1
let g:python_highlight_builtin_objs=1

let g:syntastic_python_checkers=["mypy", "pep8", "python"]
let g:syntastic_python_mypy_args="--python-version 3.6 --disallow-untyped-defs --warn-no-return"

nmap <silent> <Leader>c :SyntasticCheck<CR>

"" Nerdtree
nmap <silent> <leader>e :NERDTreeToggle<CR>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

let g:NERDTreeWinPos = "right"
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

"" Tagbar
let g:tagbar_left = 1
nmap <silent> <Leader>t :TagbarToggle<CR>

"" Git
nmap <silent> <Leader>gs :Gstatus<CR>
nmap <silent> <Leader>gd :Gvdiff<CR>
nmap <silent> <leader>gl :diffget //3<CR>
nmap <silent> <leader>gh :diffget //2<CR>


"" Move among buffers with CTRL
map <C-L> :bnext<CR>
map <C-H> :bprev<CR>

"" Powerline
let g:airline_section_x = '%{airline#util#prepend(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y = ''

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'

""" Tabular
if exists(":Tabularize")
    nmap <Leader>= :Tab /=<CR>
    vmap <Leader>= :Tab /=<CR>
    nmap <Leader>: :Tab /:\zs<CR>
    vmap <Leader>: :Tab /:\zs<CR>
endif

""" YCM
nnoremap <silent> <Leader>gd :YcmCompleter GoTo<CR>
