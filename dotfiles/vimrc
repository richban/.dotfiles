set nocompatible

""" Plugins
call plug#begin('~/.vim/plugged')
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
    Plug 'majutsushi/tagbar'
    Plug 'tpope/vim-fugitive'
    Plug 'yuttie/comfortable-motion.vim'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'Lokaltog/vim-easymotion'
    Plug 'tpope/vim-commentary'
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
    " UI
    Plug 'gruvbox-community/gruvbox'
    Plug 'sainnhe/gruvbox-material'
    Plug 'vim-airline/vim-airline'
    Plug 'ryanoasis/vim-devicons'
    Plug 'sheerun/vim-polyglot'
    " Text formating
    Plug 'Yggdroot/indentLine'
    Plug 'Raimondi/delimitMate'
    Plug 'godlygeek/tabular'
    Plug 'tpope/vim-surround'
    " LSP
    Plug 'prabirshrestha/vim-lsp' | Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete.vim' | Plug 'prabirshrestha/asyncomplete-lsp.vim'
    " Profile Vim startup
    Plug 'dstein64/vim-startuptime'
    Plug 'wakatime/vim-wakatime'
    Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(1) } }
call plug#end()

filetype plugin indent on       " Add filetype, plugin, and indent support
syntax on

""" Colorscheme
set termguicolors
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Gruvbox theme
" set background=dark
" let g:gruvbox_contrast_dark = "hard"
" let g:gruvbox_invert_selection='0'
" let g:gruvbox_sign_column = 'bg0'
" let g:gruvbox_vert_split = 'bg0'

" Gruvboc-material
let g:gruvbox_material_background = 'hard'
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_palette = 'mix'
let g:gruvbox_material_sign_column_background = 'none'

colorscheme gruvbox-material

let mapleader=" "
set cursorline

"" Formating
set encoding=utf-8
set showcmd
set textwidth=79
set colorcolumn=80
set laststatus=2
set linespace=1
set smartindent
set updatetime=50
set mouse=a
" Give more space for displaying messages.
set cmdheight=1

if has('nvim')
    set clipboard+=unnamedplus
    let g:python_host_prog = "/Users/rbanyi/.pyenv/versions/neovim2/bin/python"
    let g:python3_host_prog = "/Users/rbanyi/.pyenv/versions/neovim3/bin/python"
    let g:firenvim_config = {
    \ 'globalSettings': {
        \ 'alt': 'all',
    \  },
    \ 'localSettings': {
        \ '.*': {
            \ 'cmdline': 'neovim',
            \ 'priority': 0,
            \ 'selector': 'textarea',
            \ 'takeover': 'always',
        \ },
    \ }
\ }
    let fc = g:firenvim_config['localSettings']
    let fc['https://youtube.com.*'] = { 'takeover': 'never', 'priority': 1 }
    let fc['https?://instagram.com.*'] = { 'takeover': 'never', 'priority': 1 }
    let fc['https?://twitter.com.*'] = { 'takeover': 'never', 'priority': 1 }
    let fc['https://.*gmail.com.*'] = { 'takeover': 'never', 'priority': 1 }
    let fc['https?://.*twitch.tv.*'] = { 'takeover': 'never', 'priority': 1 }
    let fc['https?://notion.so.*'] = { 'takeover': 'never', 'priority': 1 }
else
    set ttymouse=sgr
endif

" Join yanked text on a yank (needed for terminal mode copies)
vnoremap yy y<CR>:let @"=substitute(@", '\n', '', 'g')<CR>:call yank#Osc52Yank()<CR>

""" Move selected lines
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

""" Whitespace
set nowrap                      " don't wrap lines
set tabstop=4                   " a tab is two spaces (or set this to 4)
set shiftwidth=4                   " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set smarttab
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                   " highlight matches
set incsearch                  " incremental searching
set ignorecase                 " searches are case insensitive...
set smartcase                  " ... unless they contain at least one capital letter
set number
set relativenumber
set wildmenu

" Commonly-used files
nnoremap <leader>cv :e $MYVIMRC<CR>
nnoremap <leader>cz :e ~/.zshrc<CR>
nnoremap <leader>ce :e ~/.zshenv<CR>
nnoremap <leader>ca :e ~/.alias<CR>
nnoremap <leader>cf :e ~/.functions<CR>
nnoremap <leader>ct :e ~/.tmux.conf<CR>
nnoremap <leader>cy :e ~/.yabairc<CR>
nnoremap <leader>cs :e ~/.skhdrc<CR>

" Toggle Paste mode
nnoremap <leader>p :set paste!<CR>

" Adjusting splits
nnoremap <silent> <Leader>< :vertical resize +10<CR>
nnoremap <silent> <Leader>> :vertical resize -10<CR>
nnoremap <silent> <Leader>+ :resize +10<CR>
nnoremap <silent> <Leader>- :resize -10<CR>

" Window navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

let g:python_highlight_all = 1

"" Swap/backup
set backupdir=~/tmp
set noswapfile
set nowritebackup
set nobackup

"" utilsnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" fzf
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS='--reverse'

nnoremap <C-p> :GFiles<CR>
nmap <Leader>pf :Files<CR>

" help word
nnoremap <leader>ghw :h <C-R>=expand("<cword>")<CR><CR>
" search for all occurences of the word in the project
nnoremap <leader>pw :Rg <C-R>=expand("<cword>")<CR><CR>

"" Nerdtree
nmap <silent> <leader>n :NERDTreeToggle<CR>
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:NERDTreeWinPos = "right"
let NERDTreeNaturalSort = 1
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

"" Tagbar
let g:tagbar_left = 1
nmap <silent> <Leader>t :TagbarToggle<CR>

"" Git
nmap <silent> <Leader>gs :Gstatus<CR>
nmap <silent> <Leader>gvd :Gvdiffsplit<CR>
nmap <silent> <leader>gl :diffget //3<CR>
nmap <silent> <leader>gh :diffget //2<CR>

"" Move among buffers with CTRL
map <Leader>l :bnext<CR>
map <Leader>h :bprev<CR>

"" Airline
let g:airline_section_x = '%{airline#util#prepend(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#formatter = 'default'

""" Tabular
if exists(":Tabularize")
    nmap <Leader>= :Tab /=<CR>
    vmap <Leader>= :Tab /=<CR>
    nmap <Leader>: :Tab /:\zs<CR>
    vmap <Leader>: :Tab /:\zs<CR>
endif

" Autocompletion
let g:asyncomplete_auto_completeopt = 0
set completeopt=menuone,noinsert,noselect

let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

""" LSP
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <Leader>fd :LspDocumentDiagnostics<CR>
    nmap <buffer> <Leader>ff :LspDocumentFormat<CR>
    " refer to doc to add more commands
endfunction

" easy motion
let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

augroup richban
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
    autocmd BufEnter,BufWinEnter,TabEnter *.rs :lua require'lsp_extensions'.inlay_hints{}
    au BufEnter github.com_*.txt set filetype=markdown
augroup END
